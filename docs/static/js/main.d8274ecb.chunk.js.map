{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputText","setInputText","onSubmit","e","preventDefault","trim","length","cate","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMA4BeA,EAzBK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACPC,mBAAS,IADF,mBAClCC,EADkC,KACvBC,EADuB,KAazC,OACE,0BAAMC,SARa,SAACC,GACpBA,EAAEC,iBACCJ,EAAUK,OAAOC,OAAS,GACzBR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAkBO,OAEzCN,EAAa,MAKX,2BAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAblB,SAACP,GACvBF,EAAaE,EAAEQ,OAAOF,Y,uBCPbG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACbC,EADa,iDAEyBC,UAAUH,GAFnC,+DAIAI,MAAMF,GAJN,cAIbG,EAJa,gBAKIA,EAAKC,OALT,uBAKXC,EALW,EAKXA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXnB,kBAgBZM,GAhBY,4CAAH,sDCEPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACvC,OACE,yBAAKc,UAAU,0CACb,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAIA,KCDGO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECFb,SAAEA,GAAe,IAAD,EACdd,mBAAS,CAAEqB,KAAM,GAAIa,SAAS,IADhB,mBACjCC,EADiC,KAC1BC,EAD0B,KAUxC,OARAC,qBAAU,WACNxB,EAASC,GAAWwB,MAAM,SAAAC,GACtBH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGlB,CAACpB,IACGqB,EDNsBK,CAAc1B,GAAjCa,EAF2B,EAEhCN,KAAaa,EAFmB,EAEnBA,QAWpB,OACE,oCACE,wBAAIJ,UAAU,qCAAqChB,GAClDoB,GAAW,uBAAGJ,UAAU,oCAAb,cACZ,yBAAKA,UAAU,aACZH,EAAOJ,KAAI,SAACC,GAAD,OACV,kBAAC,EAAD,eAAaiB,IAAKjB,EAAIC,IAAQD,UEKzBkB,EAzBM,WAAM,MAEW1C,mBAAS,CAC3C,WAHuB,mBAElB2C,EAFkB,KAEN5C,EAFM,KAUzB,OACE,oCACE,8CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEA,4BACG4C,EAAWpB,KAAI,SAAAT,GAAQ,OACpB,kBAAC,EAAD,CAAS2B,IAAK3B,EAAUA,SAAUA,U,MChB9C8B,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.d8274ecb.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n  const [inputText, setInputText] = useState(\"\");\r\n\r\n  const handleInputText = (e) => {\r\n    setInputText(e.target.value);\r\n  };\r\n  const handleSubmit = (e) =>{\r\n    e.preventDefault();\r\n    if(inputText.trim().length > 2 ){\r\n        setCategories( cate => [inputText,...cate ]);\r\n    }\r\n    setInputText('');\r\n  }\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      {/* <h2>Add Category</h2> */}\r\n      <input type=\"text\" value={inputText}  onChange={handleInputText}/>\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory;","export const getGifs = async ( category ) => {\r\n    const url =\r\n      `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=OBgGoGYtwXddAH1H6r9IkPU3c4V6i872`;\r\n\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n    // console.log(data);\r\n    const gifs = data.map((img) => {\r\n      return {\r\n        id: img.id,\r\n        title: img.title,\r\n        url: img.images?.downsized_medium.url,\r\n      };\r\n    });\r\n\r\n\r\n    return gifs;\r\n  };","import React from \"react\";\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n  return (\r\n    <div className=\"card animate__animated animate__fadeIn\">\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n// import { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n  // const [images, setImages] = useState([]);\r\n  const {data:images, loading} = useFetchGifs( category );\r\n  // console.log(loading);\r\n\r\n  // useEffect(() => {\r\n  //   getGifs(category).then(\r\n  //       setImages\r\n  //   );\r\n  // }, [ category ]);\r\n\r\n\r\n  // getGifs();\r\n  return (\r\n    <>\r\n      <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n      {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\r\n      <div className=\"card-grid\">\r\n        {images.map((img) => (\r\n          <GifGridItem key={img.id} {...img} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    const [state, setstate] = useState({ data: [], loading: true})\r\n    useEffect(() =>{\r\n        getGifs( category ).then( imgs => {\r\n            setstate({\r\n                data: imgs,\r\n                loading: false\r\n            });\r\n        });\r\n    }, [category]);\r\n    return state;\r\n}\r\n","import React, { useState } from \"react\";\r\nimport  AddCategory  from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n  // const categories = ['Naruto', 'Boruto', 'Walking Dead', 'Arrow' ];\r\n  const [categories, setCategories] = useState([\r\n    \"Naruto\",\r\n  ]);\r\n\r\n//   const handleAdd = () =>{\r\n//     setCategories([...categories, 'Pokemon']);\r\n//   }\r\n\r\n  return (\r\n    <>\r\n      <h2>Gif Expert App</h2>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr/>\r\n      {/* <button onClick={handleAdd}>Agregar</button> */}\r\n      <ol>\r\n        {categories.map(category => (\r\n            <GifGrid key={category} category={category} />\r\n        ))}\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}